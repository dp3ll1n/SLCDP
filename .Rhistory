allr=rep(0,ncell)
for (i in c(1:ncell)){
for (a in c(1:ncell)) {
r=rep(0,ncell)
if(i!=a){r[i]=1;r[a]=-1}
allr=cbind(allr,r)
}
}
allr=allr[,-1]
rm(r)
duM=diag(1,ncell,ncell)
deM=diag(-1,ncell,ncell)
netMat=t(cbind(duM,deM,allr))
param=paste("a",1:((ncell*(ncell+2))),sep="")
deriv=paste("dX",1:ncell,sep="")
proc=paste("X",1:ncell,sep="")
xrep=rep(proc,(ncell+2))
eqm=c()
eq=""
for (i in 1:dim(netMat)[2]){
eq=""
for (a in 1:dim(netMat)[1]){
if(a %in% c((ncell+1):(ncell*2))){if(netMat[a,i]!=0) {eq=paste(eq,paste("(",paste(netMat[a,i],param[a],paste(" ",xrep[a],xrep[a]," ",sep=""),sep="*"),")",sep=""),sep="+")} }
else {if(netMat[a,i]!=0) { eq=paste(eq,paste("(",paste(netMat[a,i],param[a],paste(" ",xrep[a]," ",sep=""),sep="*"),")",sep=""),sep="+")}}
}
eqm[i]=eq
}
eqall=eqm
###
eqm=matrix(0,ncell,ncell)
eq=""
for (j in 1:length(proc)){
for (i in 1:dim(netMat)[2]){
eq=""
for (a in 1:dim(netMat)[1]){
if(a %in% c((ncell+1):(ncell*2))){if(netMat[a,i]!=0) {eq=paste(eq,paste("(",paste(netMat[a,i],param[a],paste("( ",proc[j]," *( ",xrep[a],"",xrep[a]," - ",xrep[a]," ^2)+2* ",xrep[a]," *( ",xrep[a],"",proc[j]," -( ",xrep[a]," * ",proc[j]," ))+(( ",xrep[a]," ^2)* ",proc[j]," ))",sep=""),sep="*"),")",sep=""),sep="+")}
}
else {if(netMat[a,i]!=0) {eq=paste(eq,paste("(",paste(netMat[a,i],param[a],paste(" ",proc[j],xrep[a]," ",sep=""),sep="*"),")",sep=""),sep="+")}}
}
eqm[j,i]=paste(eq,sep="=")
}
}
ball=c()
for (i in c(1:ncell)){
for (a in c(1:ncell)){
b1=eqm[i,a]
b2=eqm[a,i]
b=paste(b1,b2,sep="")
ball=c(ball,b)
}
}
eqm=matrix(0,ncell,ncell)
eq=""
for (j in 1:dim(netMat)[2]){
for (i in 1:dim(netMat)[2]){
eq=""
for (a in 1:dim(netMat)[1]){
if(a %in% c((ncell+1):(ncell*2))){if(netMat[a,i]!=0 && netMat[a,j]!=0) { eq=paste(eq,paste("(",paste(netMat[a,i],param[a],paste(" ",xrep[a],xrep[a]," ",sep=""),netMat[a,j],sep="*"),")",sep=""),sep="+")} }
else {if(netMat[a,i]!=0 && netMat[a,j]!=0) { eq=paste(eq,paste("(",paste(netMat[a,i],param[a],paste(" ",xrep[a]," ",sep=""),netMat[a,j],sep="*"),")",sep=""),sep="+") } }
}
eqm[j,i]=eq
}
}
eq2momentProv=paste(ball,as.vector(eqm),sep="")
for (i in c(1:ncell)){
for (a in c((i+1):ncell)){
eq2momentProv=gsub(as.character(paste(" ",proc[a],proc[i]," ",sep="")),as.character(paste(" ",proc[i],proc[a]," ",sep="")), eq2momentProv)
}
}
eqmVarCov=matrix(eq2momentProv,ncell,ncell,byrow=T)
eqmVarCovUT=as.vector(eqmVarCov[lower.tri(eqmVarCov,diag=T)])
eqall=c(eqall,eqmVarCovUT)
#############
comb=expand.grid(1:ncell,1:ncell)
ind=apply(comb,1,function(x) ifelse(x[2]<=x[1],1,0))
combOk=comb[which(ind==1),]
eqName=paste("X",1:ncell,sep="")
eqName=c(eqName,apply(combOk,1,function(x) {paste0(eqName[x[2]],eqName[x[1]])}))
elem=as.vector(eqName)
subelem=paste("x[",1:(length(elem)),"]",sep="")
param=paste("a",1:((ncell*(ncell+2))),sep="")
subparam=paste("a[",1:(length(param)),"]",sep="")
expelem=elem[1:ncell]
expelem=paste(" ",expelem," ","\\^2",sep="")
subexpelem=paste(" ",paste(elem[1:ncell]," * ",sep=""),elem[1:ncell]," ",sep="")
form=data.frame(V1=eqall)
for(i in 1:dim(form)[1]){
ooo=as.character(form[i,1])
for(a in length(expelem):1){
ppp=gsub(expelem[a],subexpelem[a],(ooo))
ooo=ppp
}
form[i,1]=as.character(ooo)
}
for(i in 1:dim(form)[1]){
ooo=as.character(form[i,1])
for(a in length(elem):1){
ppp=gsub(elem[a],subelem[a],(ooo))
ooo=ppp
}
form[i,1]=as.character(ooo)
}
for(i in 1:dim(form)[1]){
ooo=as.character(form[i,1])
for(a in length(param):1){
ppp=gsub(param[a],subparam[a],(ooo))
ooo=ppp
}
form[i,1]=as.character(ooo)
}
form=apply(form,1,function(x) gsub(" ", "", x, fixed = TRUE))
formPaste=paste(form,collapse=",")
finform=paste("dxdt = function(x, t) c(", formPaste, ")",sep="",collapse = "")
hh=parse(text=finform)
return(hh)
}
#####################################################
importSimulatData=function(N,ncell,dt,files,span=0){
allSim=vector("list", N)
allSimHoldTimes=vector("list", N)
allSimCumTimes=vector("list", N)
for(n in 1:N){
sim=read.table(files[n+span],sep="\t",header=F)
holdTimes=sim[,(ncell+1)]
matrixOverTime=sim[,1:(ncell)]
allSim[[n]]=matrixOverTime
}
clonesTrajs=lapply(allSim,function(x) {x[seq(1,nrow(allSim[[1]]),length.out=((tEnd/dt)+1)),]})
return(clonesTrajs)
}
generateClones=function(N,ncell,netEffectMatrix, dupRate, deathRate, diffRate, dt, tEnd, e_0){
lapply(c(1:N), function(x) {generateCloneTraj(ncell,NetEffectMatrix, dupRate, deathRate, diffRate, dt, tEnd, E_0)} )
}
netEffectMatrixCalc=function(ncell){
allr=rep(0,ncell)
for (i in c(1:ncell)){
for (a in c(1:ncell)) {
r=rep(0,ncell)
if(i!=a){r[i]=1;r[a]=-1}
allr=cbind(allr,r)
}
}
allr=allr[,-1]
rm(r)
duM=diag(1,ncell,ncell)
deM=diag(-1,ncell,ncell)
netMat=t(cbind(duM,deM,allr))
return(netMat)
}
dXCalc=function(clonesTrajs){
dX=lapply(clonesTrajs,function(x) diff(as.matrix(x)))
dX=unlist(lapply(dX,function(x) as.vector(t(x))))
return(dX)
}
startValues=function(clonesTrajs){
clonesTrajsStartValues=do.call(rbind,lapply(clonesTrajs,function(x) {x[-dim(x)[1],]} ))
return(clonesTrajsStartValues)
}
endValuesColVec=function(clonesTrajs){
clonesTrajsEndValues=do.call(rbind,lapply(clonesTrajs,function(x) {x[-1,]} ))
clonesTrajsEndValues=as.vector(t(as.matrix(clonesTrajsEndValues)))
return(clonesTrajsEndValues)
}
diagXCalc=function(xvalues,ncell){
diagX=diag( c(xvalues,xvalues^2,rep(xvalues,(ncell))) )
return(diagX)
}
mXCalc=function(clonesTrajs,netMat){
MXols=lapply(split(clonesTrajs,seq(nrow(clonesTrajs))),function(x) {(t(netMat)) %*% diagXCalc(x,ncell) *dt})
MXols <- do.call(rbind,MXols)
MXols=Matrix(MXols,sparse=T)
return(MXols)
}
setConstraints=function(ncell,
duplRatesLB=NA,
duplRatesUB=NA,
deathRatesLB=NA,
deathRatesUB=NA,
diffRatesLB=NA,
diffRatesUB=NA){
if(is.na(duplRatesLB)){
duplRatesLB=rep(0,ncell)
}
if(is.na(duplRatesUB)){
duplRatesUB=rep(NA,ncell)
#duplRatesUB=rep(Inf,ncell)
}
if(is.na(deathRatesLB)){
deathRatesLB=rep(0,ncell)
}
if(is.na(deathRatesUB)){
deathRatesUB=rep(NA,ncell)
#deathRatesUB=rep(Inf,ncell)
}
if(is.na(diffRatesLB)){
diffRatesLB=matrix(0,nrow = ncell,ncol = ncell)
}
if(is.na(diffRatesUB)){
diffRatesUB=matrix(NA,nrow = ncell,ncol = ncell)
#diffRatesUB=matrix(Inf,nrow = ncell,ncol = ncell)
}
if(!(all(c(length(duplRatesLB),
length(duplRatesUB),
length(deathRatesLB),
length(deathRatesUB))==ncell))){
stop("Duplication and death rates upper and lower bounds must have ncell length")
}
if(!(all(c(ncol(diffRatesLB),
nrow(diffRatesLB),
ncol(diffRatesUB),
nrow(diffRatesUB))==ncell))){
stop("Differentiation rates upper and lower bounds must be a matrices of size ncell x ncell")
}
### constrain matrix QP ###
diag(diffRatesUB)=0
A=diag(ncell*(ncell+2))
lb=c(duplRatesLB,deathRatesLB,as.vector(diffRatesLB))
ub=c(duplRatesUB,deathRatesUB,as.vector(diffRatesUB))
constraints=list(A=A,lb=lb,ub=ub)
return(constraints)
}
setConstraintsCplex=function(ncell,
duplRatesLB=NA,
duplRatesUB=NA,
deathRatesLB=NA,
deathRatesUB=NA,
diffRatesLB=NA,
diffRatesUB=NA){
if(is.na(duplRatesLB)){
duplRatesLB=rep(0,ncell)
}
if(is.na(duplRatesUB)){
#duplRatesUB=rep(NA,ncell)
duplRatesUB=rep(Inf,ncell)
}
if(is.na(deathRatesLB)){
deathRatesLB=rep(0,ncell)
}
if(is.na(deathRatesUB)){
#deathRatesUB=rep(NA,ncell)
deathRatesUB=rep(Inf,ncell)
}
if(is.na(diffRatesLB)){
diffRatesLB=matrix(0,nrow = ncell,ncol = ncell)
}
if(is.na(diffRatesUB)){
#diffRatesUB=matrix(NA,nrow = ncell,ncol = ncell)
diffRatesUB=matrix(Inf,nrow = ncell,ncol = ncell)
}
if(!(all(c(length(duplRatesLB),
length(duplRatesUB),
length(deathRatesLB),
length(deathRatesUB))==ncell))){
stop("Duplication and death rates upper and lower bounds must have ncell length")
}
if(!(all(c(ncol(diffRatesLB),
nrow(diffRatesLB),
ncol(diffRatesUB),
nrow(diffRatesUB))==ncell))){
stop("Differentiation rates upper and lower bounds must be a matrices of size ncell x ncell")
}
### constrain matrix QP ###
diag(diffRatesUB)=0
A=diag(ncell*(ncell+2))
lb=c(duplRatesLB,deathRatesLB,as.vector(diffRatesLB))
ub=c(duplRatesUB,deathRatesUB,as.vector(diffRatesUB))
constraints=list(A=A,lb=lb,ub=ub)
return(constraints)
}
runOptimization=function(MX,dX,W1Inv=NULL,constraints,bvec=NULL){
if(is.null(W1Inv)){
W1Inv= Diagonal(nrow(MX), x = 1)
}
if(is.null(bvec)){
bvec= rep(0, nrow(constraints$A))
}
Qmat = (t(MX)%*% W1Inv %*%MX);
cvec = -2*(t(as.vector(dX)))%*%W1Inv%*%MX;
cvec=as.matrix(cvec)
Qmat=as.matrix(Qmat)
mycop <- cop(f  = quadfun(Q=Qmat, a=cvec, d=0),
lb = lbcon(val=constraints$lb),
ub = ubcon(val=constraints$ub),
lc = lincon(A=constraints$A,
dir=rep(">=",nrow(constraints$A) ),
val=bvec,
name=seq_along(1:nrow(constraints$A))))
res <- solvecop(mycop, solver="default", quiet=FALSE)
a=res$x
a[a<constraints$lb]=constraints$lb[a<constraints$lb]
a=zapsmall(a)
return(a)
}
runOptimizationCplex=function(MX,dX,W1Inv=NULL,constraints,bvec=NULL){
if(is.null(W1Inv)){
W1Inv= Diagonal(nrow(MX), x = 1)
}
if(is.null(bvec)){
bvec= rep(0, nrow(constraints$A))
}
Qmat = 2*t(MX)%*% W1Inv %*%MX;
cvec = -2*(as.vector(t(dX)))%*%W1Inv%*%MX;
cvec=as.matrix(cvec)
Qmat=as.matrix(Qmat)
a=Rcplex(cvec,
(-1*(constraints$A)),
bvec=bvec,
as.matrix(forceSymmetric(Qmat)),
lb = constraints$lb,
ub = constraints$ub,
objsense = c("min"),
sense = "L", vtype = NULL, n = 1)$xopt
return(a)
}
initialValues1_2ODEsCalc=function(clonesTrajsStartValues,ncell){
comb=expand.grid(1:ncell,1:ncell)
ind=apply(comb,1,function(x) ifelse(x[2]<=x[1],1,0))
combOk=comb[which(ind==1),]
eqName=paste("X",1:ncell,sep="")
eqName=c(eqName,apply(combOk,1,function(x) {paste0(eqName[x[2]],eqName[x[1]])}))
initStateDF=lapply(split(clonesTrajsStartValues,seq(nrow(clonesTrajsStartValues))),function(y) { as.numeric(unlist(apply(combOk,1,function(x,y) {y[x[1]]*y[x[2]]},y)))})
initStateDF=do.call(rbind,initStateDF)
initStateDF=cbind(clonesTrajsStartValues,initStateDF)
colnames(initStateDF)=eqName
return(initStateDF)
}
named_rec = function(x, t) {if(t==dt) (x)}
secOrdMoments=function(ncell){
comb=expand.grid(1:ncell,1:ncell)
ind=apply(comb,1,function(x) ifelse(x[2]<=x[1],1,0))
combOk=comb[which(ind==1),]
return(combOk)
}
calcW=function(diffEqSol,ncell,combOk){
moment1=diffEqSol[1:ncell]
moment2=diffEqSol[(ncell+1):length(diffEqSol)]
m1_m1=apply(combOk,1,function(x,moment1) {moment1[x[1]]* moment1[x[2]]},moment1)
wi=diag(ncell)
wi[lower.tri(wi, diag=TRUE)] <- (moment2-m1_m1)
wi[upper.tri(wi)] <- t(wi)[upper.tri(wi)]
return(wi)
}
# import integrate Sys
calculateW1Inv=function(sdePred,lambda=1,ncell,combOk){
w=lapply(sdePred,function(x) {calcW(x,ncell,combOk)})
w1Inv=lapply(w,function(x){diag(x)=diag(x)+lambda; y=(ginv(x)); return(y)} )
w1Inv=(bdiag(w1Inv))
return(w1Inv)
}
calculatePred=function(initialValues1_2ODEs,a){
sdePred=lapply(split(initialValues1_2ODEs,seq(nrow(initialValues1_2ODEs))),function(x) {
(as.numeric(integrate_sys(dxdt,as.numeric(x),dt, step_size = stepSize, start = 0, observer = named_rec,atol=toll,rtol=toll)[-1]))})
return(sdePred)
}
calculateCountsPred=function(sdePred,ncell){
fX=lapply(sdePred, function(x) x[1:ncell])
fX=unlist(lapply(fX,function(x) as.vector(t(x))))
return(fX)
}
calculateJ=function(initialValues1_2ODEs,a,ncell,eps){
ainit=a
J=NULL
for(parj in which(ainit!=0)[1]){
a=ainit
a[parj]=ainit[parj]+eps
JtP=calculatePred(initialValues1_2ODEs,a)
JtPv=calculateCountsPred(JtP,ncell)
a[parj]=ainit[parj]-eps
JtM=calculatePred(initialValues1_2ODEs,a)
JtMv=calculateCountsPred(JtM,ncell)
# if(is.null(J)){
#   J=matrix(0,nrow = length(JtMv),ncol = length(ainit))
#   J[,parj]=(JtPv-JtMv)/(2*eps)
# }else{
J=(JtPv-JtMv)/(2*eps)
# }
}
a=ainit
return(JtMv)
}
# Initialization ####################################################################
#inputDir="/home/d4np3l/Projects/GRO2/sim"
#setwd(inputDir)
#files=dir(pattern="^Sim*")
ncell=5
diffRate=matrix( c(0,0.2,0.35,0,0,0,0,0,0.75,0,0,0,0,0.25,0.5,0,0,0,0,0,0,0,0,0,0),5,5,byrow = T)
dupRate =c(1.000,1.500,1.800,2.500,2.800)
deathRate=c(0.033,0.030,0.045,0.031,0.043);
E_0=c(1,0,0,0,0)
N=10	# number of clones
tEnd=10	# time end
dt=1	# delta time
eps=1e-4
toll=1e-3
stepSize=dt/10
interv=dt+stepSize
sourceCpp("/home/d4np3l/Projects/workingPapers/SLCDP/12-Revision-Aug20/revision/cloneGenerator.cpp")
#ClonesTrajs=importSimulatData(N,ncell,dt,files,span=0)
NetEffectMatrix= netEffectMatrixCalc(ncell)
E_0=rep(0,ncell)
E_0[1]=1
ClonesTrajs=generateClones(N,ncell,NetEffectMatrix, dupRate, deathRate, diffRate, dt, tEnd, E_0)
deltaX=dXCalc(ClonesTrajs)
ClonesTrajsStartValues=startValues(ClonesTrajs)
ClonesTrajsEndValues=endValuesColVec(ClonesTrajs)
MXCalc=mXCalc(ClonesTrajsStartValues,NetEffectMatrix)
#Constraints=setConstraints(5)
ConstraintsCplex=setConstraintsCplex(5)
CombOk=secOrdMoments(ncell)
InitialValues1_2ODEs=initialValues1_2ODEsCalc(ClonesTrajsStartValues,ncell)
## Initial parameters guess by OLS
#a=runOptimization(MXCalc,ClonesTrajsEndValues,W1Inv=NULL,Constraints)
a=runOptimizationCplex(MXCalc,deltaX,W1Inv=NULL,ConstraintsCplex)
## Refined estimate with GLS
# load dxdt formula
form=generateOdeFormula(ncell)
eval(form)
SdePred=calculatePred(InitialValues1_2ODEs,a)
W1=calculateW1Inv(SdePred,lambda=0,ncell,CombOk)
#a=runOptimization(MXCalc,ClonesTrajsEndValues,W1Inv=W1,Constraints)
a=runOptimizationCplex(MXCalc,deltaX,W1Inv=W1,ConstraintsCplex)
## start iterative process based on Jacobian
SdePred=calculatePred(InitialValues1_2ODEs,a)
W1=calculateW1Inv(SdePred,lambda=0,ncell,CombOk)
FX=calculateCountsPred(SdePred,ncell)
aCurr=a
iter=0
maxiter=100
while( (sum(abs(a-aCurr))>0.01 && (iter<maxiter))|( iter==0) ){
iter=iter+1
print(sum(abs(a-aCurr)))
aCurr=a
J=matrix(0,nrow = length(FX),ncol = length(aCurr))
for(parj in which(aCurr!=0)){
a=aCurr
a[parj]=aCurr[parj]+eps
JtP=calculatePred(InitialValues1_2ODEs,a)
JtPv=calculateCountsPred(JtP,ncell)
J[,parj]=(JtPv-FX)/(eps)
}
ConstraintsCplex$lb=-a
da=runOptimizationCplex(J,(ClonesTrajsEndValues-FX),W1Inv=W1,ConstraintsCplex,bvec=a)
a=a+1*(da)
SdePred=calculatePred(InitialValues1_2ODEs,a)
W1=calculateW1Inv(SdePred,lambda=0,ncell,CombOk)
FX=calculateCountsPred(SdePred,ncell)
print(a)
}
## create R package
setwd("/home/d4np3l/Projects/GitHub/dp3ll1n")
library(roxygen2)
library(roxygen2)
library("devtools")
setwd("/home/d4np3l/Projects/GitHub/dp3ll1n")
create("SLCDP")
source('~/.active-rstudio-document')
netEffectMatrixCalc=function(ncell){
allr=rep(0,ncell)
for (i in c(1:ncell)){
for (a in c(1:ncell)) {
r=rep(0,ncell)
if(i!=a){r[i]=1;r[a]=-1}
allr=cbind(allr,r)
}
}
allr=allr[,-1]
rm(r)
duM=diag(1,ncell,ncell)
deM=diag(-1,ncell,ncell)
netMat=t(cbind(duM,deM,allr))
return(netMat)
}
dim(netEffectMatrixCalc(5))
Y1=seq(-0.5,+1.5,by=0.2)
Y1
Y1[4]==0.1
Y1[4]
Y1[4]!=0.1
ff1=seq(-0.5,+1.5,by=0.2)
ff1[4]!=0.1
ff1[4]==0.1
ff1[6]
ff1[6]==0.5
ff1[4]==0.1
ff1[4]==.1
ff1[4]==1
ff1[4]==0.1
?Matrix
??Matrix
Matrix::Matrix()
?Matrix::Matrix
?c()
?Diagonal
?forceSymmetric
?bdiag
Rcpp.package.skeleton( "SLCDP" )
library(Rcpp)
Rcpp.package.skeleton( "SLCDP" )
getwd()
writeLines( system( "tree", intern = TRUE ) )
document()
setwd("/home/d4np3l/Projects/GitHub/dp3ll1n/SLCDP")
document()
rm(list=ls())
setwd("/home/d4np3l/Projects/GitHub/dp3ll1n/SLCDP")
document()
install("SLCDP")
library("devtools")
library(roxygen2)
setwd("/home/d4np3l/Projects/GitHub/dp3ll1n/SLCDP")
document()
install("SLCDP")
